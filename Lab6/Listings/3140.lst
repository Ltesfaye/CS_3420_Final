


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             myData, DATA, READWRITE
    2 00000000         ;global variable in assembly   
    3 00000000 00000000 
                       OrigStackPointer
                               DCD              0x00
    4 00000004         
    5 00000004                 AREA             myProg, CODE, READONLY
    6 00000000         ;export assembly functions   
    7 00000000                 EXPORT           process_terminated
    8 00000000                 EXPORT           process_begin
    9 00000000                 EXPORT           process_blocked
   10 00000000                 EXPORT           PIT0_IRQHandler
   11 00000000         ;  EXPORT SVC_Handler
   12 00000000         ;import C functions
   13 00000000         ;  IMPORT process_select
   14 00000000         
   15 00000000                 PRESERVE8
   16 00000000         
   17 00000000         
   18 00000000 4003710C 
                       TFLG    EQU              0x4003710C  ; TFLG address
   19 00000000 40037108 
                       CTRL    EQU              0x40037108  ; Ctrl address
   20 00000000 E000ED20 
                       SHCSR   EQU              0xE000ED20
   21 00000000         
   22 00000000         SVC_Handler
   23 00000000 9906            LDR              R1, [SP,#24] ; Read PC of SVC i
                                                            nstruction
   24 00000002 F811 0C02       LDRB             R0, [R1,#-2] ; Get #N from SVC 
                                                            instruction
   25 00000006 A101            ADR              R1, SVC_Table
   26 00000008 F851 F020       LDR              PC, [R1,R0,LSL #2] ; Branch to 
                                                            Nth SVC routine
   27 0000000C         
   28 0000000C         SVC_Table
   29 0000000C 00000000        DCD              SVC0_begin
   30 00000010 00000000        DCD              SVC1_terminate
   31 00000014 00000000        DCD              PIT0_IRQHandler ; Use system ti
                                                            ck as SVC2 handler
   32 00000018         
   33 00000018         SVC0_begin
   34 00000018 E92D 4FF0       PUSH             {R4-R11,LR}
   35 0000001C         ;******* Store Original Stack Pointer ********
   36 0000001C 4914            LDR              R1, =OrigStackPointer
   37 0000001E F8C1 D000       STR              SP, [R1]
   38 00000022         ;********************************************
   39 00000022         SVC1_terminate
   40 00000022         
   41 00000022 2000            MOVS             R0, #0
   42 00000024 E011            B                do_process_select
   43 00000026         
   44 00000026         process_terminated
   45 00000026 B662            CPSIE            i           ; Enable global int
                                                            errupts, just in ca
                                                            se   
   46 00000028 DF01            SVC              #1          ; SVC1 = process te
                                                            rminated
   47 0000002A         ; This SVC shouldn't ever return, as it would mean the p



ARM Macro Assembler    Page 2 


                       rocess was scheduled again
   48 0000002A         
   49 0000002A         process_begin
   50 0000002A B662            CPSIE            i           ; Enable global int
                                                            errupts (for SVC)
   51 0000002C DF00            SVC              #0          ; Syscall into sche
                                                            duler
   52 0000002E 4770            BX               LR
   53 00000030         
   54 00000030         
   55 00000030         process_blocked
   56 00000030 B662            CPSIE            i           ; Enable global int
                                                            errupts, just in ca
                                                            se   
   57 00000032 DF02            SVC              #2          ; SVC2 = process bl
                                                            ocked        
   58 00000034 4770            BX               LR
   59 00000036         
   60 00000036         PIT0_IRQHandler                      ; Timer Interrupt
   61 00000036 B672            CPSID            i           ; Disable all inter
                                                            rupts 
   62 00000038 E92D 4FF0       PUSH             {R4-R11,LR} ; save registers
   63 0000003C         ;----store scheduling timer state----
   64 0000003C 490D            LDR              R1, =CTRL
   65 0000003E 6808            LDR              R0, [R1]
   66 00000040 B401            PUSH             {R0}
   67 00000042         
   68 00000042         ;---clear the interrupt flag----
   69 00000042 4C0D            LDR              R4, =TFLG
   70 00000044 2101            MOVS             R1, #1
   71 00000046 6021            STR              R1, [R4]
   72 00000048         ;-------------------------------
   73 00000048         
   74 00000048         ;move sp to r0 to prepare for process_select 
   75 00000048 4668            MOV              R0, SP
   76 0000004A         
   77 0000004A         do_process_select
   78 0000004A         ;******* Load Original Stack Pointer ********
   79 0000004A         ; We want the process select function to run on the "mai
                       n" stack
   80 0000004A         ; This helps reduce funkiness when a process stack is to
                       o small and process_select overwrites other memory
   81 0000004A 4909            LDR              R1, =OrigStackPointer
   82 0000004C F8D1 D000       LDR              SP, [R1]
   83 00000050         ;********************************************
   84 00000050 F000 F800       BL               process_select ;Process_select 
                                                            returns 0 if there 
                                                            are no processes le
                                                            ft
   85 00000054 2800            CMP              R0, #0
   86 00000056 D104            BNE              resume_process ;take branch if 
                                                            there are more proc
                                                            esses
   87 00000058         
   88 00000058         ; Disable scheduling timer before returning to initial c
                       aller
   89 00000058 4906            LDR              R1, =CTRL
   90 0000005A 2000            MOVS             R0, #0
   91 0000005C 6008            STR              R0, [R1]



ARM Macro Assembler    Page 3 


   92 0000005E         
   93 0000005E E8BD 8FF0       POP              {R4-R11,PC} ; Restore calle-sav
                                                            e state and return
   94 00000062         
   95 00000062         resume_process
   96 00000062 4685            MOV              SP, R0      ;switch stacks
   97 00000064         ;---- restore scheduling timer state
   98 00000064 BC01            POP              {R0}
   99 00000066 4903            LDR              R1, =CTRL
  100 00000068 6008            STR              R0, [R1]
  101 0000006A         
  102 0000006A B662            CPSIE            I           ; Enable global int
                                                            errupts before retu
                                                            rning from handler
  103 0000006C E8BD 8FF0       POP              {R4-R11,PC} ; Restore registers
                                                             that aren't saved 
                                                            by interrupt, and r
                                                            eturn from interrup
                                                            t
  104 00000070                 END
              00000000 
              40037108 
              4003710C 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\3140.d -o.\objects\3140.o -I.\RTE\Device\MK64FN1M0VLL
12 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Driver\Include
 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil
\Kinetis_SDK_DFP\2.3.0\examples\frdmk64f -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_SDK
_DFP\2.3.0\platform\devices -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_SDK_DFP\2.3.0\pl
atform\drivers\inc -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_SDK_DFP\2.3.0\platform\ha
l\inc -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_SDK_DFP\2.3.0\platform\osa\inc -IC:\Ke
il_v5\ARM\PACK\Keil\Kinetis_SDK_DFP\2.3.0\platform\system\inc -IC:\Keil_v5\ARM\
PACK\Keil\Kinetis_SDK_DFP\2.3.0\platform\utilities\inc -IC:\Keil_v5\ARM\PACK\Ke
il\MDK-Middleware\7.6.0\Board -IC:\Keil_v5\ARM\PACK\NXP\MK64F12_DFP\10.0.0 -IC:
\Keil_v5\ARM\PACK\NXP\MK64F12_DFP\10.0.0\drivers --predefine="__EVAL SETA 1" --
predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="
CPU_MK64FN1M0VLL12 SETA 1" --list=.\listings\3140.lst 3140.s
